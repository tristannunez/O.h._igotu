setwd("F:/deer_igotu_github") # set your local working directory
setwd("F:/deer_igotu_github/github/O.h._igotu") # set your local working directory
collarfiles<-dir("./raw_csv_data")
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
names(hop.deer.csvs[[1]])
hop.deer.csvs[[1]][1,]
CollarFixRates <- function(X){
unit.time <-X[,"Time"]
unit.date <-X[,"Date"]
unit.datetime <- paste(unit.date, unit.time, sep="")
unit.time.POSIXct<- as.POSIXct(strptime(unit.datetime, "%Y/%m/%d %H:%M:%S"), tz="UTC") # what timezone are igotu units recording in?
difftimes <-difftime(unit.time.POSIXct[-1],unit.time.POSIXct[-length(unit.time.POSIXct)], units="secs")
data.frame(median_diff=median(difftimes), min_diff=min(difftimes), max_diff=max(difftimes))
}
durations<-lapply(hop.deer.csvs, FUN=CollarFixRates)
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
library(raster)
library(rgdal)
library(lubridate)
setwd("F:/deer_igotu_github/github/O.h._igotu") # set your local working directory
collarfiles<-dir("./raw_csv_data")
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
collarfiles
setwd("F:/deer_igotu_github/github/O.h._igotu") # set your local working directory
collarfiles<-dir("./raw_csv_data")
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
setwd("F:/deer_igotu_github/github/O.h._igotu") # set your local working directory
collarfiles<-dir("./raw_csv_data")
collarfiles
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
collarfiles
wd<- getwd()
wd
collarfiles<-paste(wd, "./raw_csv_data", dir("./raw_csv_data"), sep="")
collarfiles
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
collarfiles<-paste(wd, "./raw_csv_data/", dir("./raw_csv_data"), sep="")
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
ExtractCollarData <- function (X){
id<- "B2" #  # hard-coding in for now; this could vary based on logger file name or other
#  study.name<- "Hopland Igotu" #X[,"Device.Name"]
unit.time <-X[,"Time"]
unit.date <-X[,"Date"]
unit.datetime <- paste(unit.date, unit.time, sep="")
unit.time.POSIXct<- as.POSIXct(strptime(unit.datetime, "%Y/%m/%d %H:%M:%S"), tz="UTC") # what timezone are igotu units recording in?
lat <-X[,"Latitude"]
lon <-X[,"Longitude"]
#lotek.fix.status <- X[,"Fix.Status"]
#lotek.dop <- X[,"DOP"]
data.frame(id=id, unit.time.POSIXct=unit.time.POSIXct, lat=lat, lon=lon)
}
extracted.list <- lapply(hop.deer.csvs, FUN=ExtractCollarData)
extracted.list
B2 <- rbind(B2_0, B2_1)
B2_0<-extracted.list[[1]]
B2_1 <-extracted.list[[2]]
B2 <- rbind(B2_0, B2_1)
B2
Sys.timezone()
start_time <- as.POSIXct(strptime("2017-02-14 09:30:00", "%Y-%m-%d %H:%M:%S", tz="UTC"), tz="UTC")
start_time
start_time <- as.POSIXct(strptime("2017-02-14 09:30:00", "%Y-%m-%d %H:%M:%S", tz="UTC"), tz="America/Los_Angeles")
start_time <- as.POSIXct(strptime("2017-02-14 09:30:00", "%Y-%m-%d %H:%M:%S", tz="America/Los_Angeles"), tz="America/Los_Angeles")
start_time
index<- B2$unit.time.POSIXct > start_time
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
ExtractCollarData <- function (X){
id<- "B2" #  # hard-coding in for now; this could vary based on logger file name or other
unit.time <-X[,"Time"]
unit.date <-X[,"Date"]
unit.datetime <- paste(unit.date, unit.time, sep="")
unit.time.POSIXct<- as.POSIXct(strptime(unit.datetime, "%Y/%m/%d %H:%M:%S"), tz="America/Los_Angeles") # what timezone are igotu units recording in?
lat <-X[,"Latitude"]
lon <-X[,"Longitude"]
data.frame(id=id, unit.time.POSIXct=unit.time.POSIXct, lat=lat, lon=lon)
}
extracted.list <- lapply(hop.deer.csvs, FUN=ExtractCollarData)
B2_0<-extracted.list[[1]]
B2_1 <-extracted.list[[2]]
B2 <- rbind(B2_0, B2_1)
start_time <- as.POSIXct(strptime("2017-02-14 09:30:00", "%Y-%m-%d %H:%M:%S", tz="America/Los_Angeles"), tz="America/Los_Angeles")
index<- B2$unit.time.POSIXct > start_time
index
B2_on <- B2[index,]
B2.spdf <- B2_on # copy
coordinates(B2) <- ~lon+lat # creat spdf
proj4string(B2) <- CRS("+proj=longlat +ellps=WGS84")
# pull out from list
B2_0<-extracted.list[[1]]
B2_1 <-extracted.list[[2]]
# bind these together because they're from the same animal
B2 <- rbind(B2_0, B2_1)
# remove points that are from before the tag was deployed (start time is estimated ... whatis it really?)
start_time <- as.POSIXct(strptime("2017-02-14 09:30:00", "%Y-%m-%d %H:%M:%S", tz="America/Los_Angeles"), tz="America/Los_Angeles")
index<- B2$unit.time.POSIXct > start_time
B2_on <- B2[index,]
# transform into an spdf
B2.spdf <- B2_on # copy
coordinates(B2.spdf) <- ~lon+lat # creat spdf
proj4string(B2.spdf) <- CRS("+proj=longlat +ellps=WGS84")
plot(B2.spdf)
plot(B2.spdf, pch=".")
blue.ras<-raster("F:/hopland_imagery/GE_test/B2_test1.tif", band=3)
plot(blue.ras)
plot(B2.spdf, add=T, col="blue", pch=".", cex=2)
plot(B2.spdf, add=T, col="blue", pch=".", cex=1.5)
plot(blue.ras)
plot(B2.spdf, add=T, col="blue", pch=".", cex=1.5)
plot(B2.spdf, add=T, col="blue", pch=".")
plot(blue.ras)
plot(B2.spdf, add=T, col="blue", pch=".")
writeOGR(B2.spdf, dsn="./" ,layer="B2_points", driver="ESRI Shapefile")
writeOGR(B2.spdf, dsn="." ,layer="B2_points", driver="ESRI Shapefile")
B2.sl<-SpatialLines(list(Lines(list(Line(coordinates(B2.spdf))),"X")))
B2.sl<-SpatialLines(list(Lines(list(Line(coordinates(B2.spdf))),"X")))
# have to turn into a spatial lines data frame to write out as shapefile
B2.sldf<-SpatialLinesDataFrame(B2.sl, data=data.frame(animalid="B2"), match.ID=F)
writeOGR(B2.sldf, dsn="." ,layer="B2_line", driver="ESRI Shapefile")
library(raster)
library(rgdal)
library(lubridate)
setwd("F:/deer_igotu_github/github/O.h._igotu") # set your local working directory
wd<- getwd()
collarfiles<-paste(wd, "./raw_csv_data/", dir("./raw_csv_data"), sep="")
# read in the deer files
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
ExtractCollarData <- function (X){
id<- "B2" #  # hard-coding in for now; this could vary based on logger file name or other
unit.time <-X[,"Time"]
unit.date <-X[,"Date"]
unit.datetime <- paste(unit.date, unit.time, sep="")
# translates into POSIXct times
unit.time.POSIXct<- as.POSIXct(strptime(unit.datetime, "%Y/%m/%d %H:%M:%S"), tz="America/Los_Angeles") # what timezone are igotu units recording in?
# rename lat and long
lat <-X[,"Latitude"]
lon <-X[,"Longitude"]
# spit out as a dataframe
data.frame(id=id, unit.time.POSIXct=unit.time.POSIXct, lat=lat, lon=lon)
}
# generate list of extracted collar data
extracted.list <- lapply(hop.deer.csvs, FUN=ExtractCollarData)
# pull out from list
B2_0<-extracted.list[[1]]
B2_1 <-extracted.list[[2]]
# bind these together because they're from the same animal ... presumably theres's some data in here that's not on-animal data?
B2 <- rbind(B2_0, B2_1)
# remove points that are from before the tag was deployed (start time is estimated ... whatis it really?)
start_time <- as.POSIXct(strptime("2017-02-14 09:30:00", "%Y-%m-%d %H:%M:%S", tz="America/Los_Angeles"), tz="America/Los_Angeles")
index<- B2$unit.time.POSIXct > start_time
B2_on <- B2[index,]
# transform into an spdf
B2.spdf <- B2_on # copy
coordinates(B2.spdf) <- ~lon+lat # creat spdf
proj4string(B2.spdf) <- CRS("+proj=longlat +ellps=WGS84")
# check, takes a while to plot this many points.
plot(B2.spdf, pch=".")
# if you want to write this out as a shapefile ...
writeOGR(B2.spdf, dsn="." ,layer="B2_points", driver="ESRI Shapefile")
# to turn the movement track into a long line
B2.sl<-SpatialLines(list(Lines(list(Line(coordinates(B2.spdf))),"X")))
# have to turn into a spatial lines data frame to write out as shapefile
B2.sldf<-SpatialLinesDataFrame(B2.sl, data=data.frame(animalid="B2"), match.ID=F)
# write out as shapefile
writeOGR(B2.sldf, dsn="." ,layer="B2_line", driver="ESRI Shapefile")
writeOGR(B2.spdf, dsn="./shapefiles" ,layer="B2_points", driver="ESRI Shapefile")
library(raster)
library(rgdal)
library(lubridate)
setwd("F:/deer_igotu_github/github/O.h._igotu") # set your local working directory
wd<- getwd()
collarfiles<-paste(wd, "./raw_csv_data/", dir("./raw_csv_data"), sep="")
# read in the deer files
hop.deer.csvs<-lapply(collarfiles, FUN=read.csv)
ExtractCollarData <- function (X){
id<- "B2" #  # hard-coding in for now; this could vary based on logger file name or other
unit.time <-X[,"Time"]
unit.date <-X[,"Date"]
unit.datetime <- paste(unit.date, unit.time, sep="")
# translates into POSIXct times
unit.time.POSIXct<- as.POSIXct(strptime(unit.datetime, "%Y/%m/%d %H:%M:%S"), tz="America/Los_Angeles") # what timezone are igotu units recording in?
# rename lat and long
lat <-X[,"Latitude"]
lon <-X[,"Longitude"]
# spit out as a dataframe
data.frame(id=id, unit.time.POSIXct=unit.time.POSIXct, lat=lat, lon=lon)
}
# generate list of extracted collar data
extracted.list <- lapply(hop.deer.csvs, FUN=ExtractCollarData)
# pull out from list
B2_0<-extracted.list[[1]]
B2_1 <-extracted.list[[2]]
# bind these together because they're from the same animal ... presumably theres's some data in here that's not on-animal data?
B2 <- rbind(B2_0, B2_1)
# remove points that are from before the tag was deployed (start time is estimated ... whatis it really?)
start_time <- as.POSIXct(strptime("2017-02-14 09:30:00", "%Y-%m-%d %H:%M:%S", tz="America/Los_Angeles"), tz="America/Los_Angeles")
index<- B2$unit.time.POSIXct > start_time
B2_on <- B2[index,]
# transform into an spdf
B2.spdf <- B2_on # copy
coordinates(B2.spdf) <- ~lon+lat # creat spdf
proj4string(B2.spdf) <- CRS("+proj=longlat +ellps=WGS84")
# check, takes a while to plot this many points.
plot(B2.spdf, pch=".")
# if you want to write this out as a shapefile ...
writeOGR(B2.spdf, dsn="./shapefiles" ,layer="B2_points", driver="ESRI Shapefile")
# to turn the movement track into a long line
B2.sl<-SpatialLines(list(Lines(list(Line(coordinates(B2.spdf))),"X")))
# have to turn into a spatial lines data frame to write out as shapefile
B2.sldf<-SpatialLinesDataFrame(B2.sl, data=data.frame(animalid="B2"), match.ID=F)
# write out as shapefile
writeOGR(B2.sldf, dsn="./shapefiles" ,layer="B2_line", driver="ESRI Shapefile")
